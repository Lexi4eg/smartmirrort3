version: '3.9'

services:

  postgres:
    container_name: postgres
    platform: linux/amd64
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=smartmirror
    ports:
      - "5432:5432"
    expose:
      - 5432
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: ./
      target: dev
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    env_file: .env
    depends_on:
      - postgres
      - zookeeper
      - broker
      - websocket
    networks:
      - app-network
  websocket:
    container_name: websocket
    build: ./Servers/Websocket/
    ports:
      - "3001:3001"
    expose:
      - 3001
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    expose:
      - 2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    depends_on:
      - postgres
    networks:
      - app-network


  broker:
    image: confluentinc/cp-kafka
    container_name: broker
    ports:
      - "9092:9092"
    expose:
      - 9092
    networks:
      - app-network
    depends_on:
      - zookeeper
      - postgres
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
volumes:
  pgdata: {}

networks:
  app-network:
    driver: bridge